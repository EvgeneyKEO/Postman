{
	"info": {
		"_postman_id": "f56b9216-3c6f-4161-aa71-874bcad76212",
		"name": "Home work #2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21929490"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что приходит статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Evgen\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Age in response = Age in request\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"24\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Salary in response = Salary in request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"\r",
							"// Спарсить request (из POST метода)\r",
							"let req = request.data;\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request №2\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response = Age in request №2\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"//  Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//  Сперва поменяем тип данных salary в запросе из строки в число, потом сделаем проверку\r",
							"let req_salary = +req.salary\r",
							"pm.test(\"Salary in response = Salary in request №2\", function () {\r",
							"    pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"resp_family = \" + typeof resp.family)\r",
							"\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5 = req_salary * 4\r",
							"pm.test(\"resp_salary_1_5 = req_salary * 4\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Evgen",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что приходит статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"\r",
							"// Спарсить request (из GET метода)\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Age in response = Age in request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"let req_salary = + req.salary;\r",
							"console.log(\"req_salary = \" + typeof req_salary)\r",
							"console.log(\"resp_salary = \" + typeof resp.salary)\r",
							"pm.test(\"salary in response = salary in request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"resp_family =\" +typeof resp.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\")\r",
							"}); \r",
							"\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has an age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\")\r",
							"}); \r",
							"\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name has Lucky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"}); \r",
							"\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age has 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.be.oneOf([4])\r",
							"}); \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Evgen&age=24&salary=10000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request (из GET метода)\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age in response = age in request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log (\"req_salary = \" + typeof req.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log (\"resp_salary = \" + typeof resp.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (\"resp_salary_element_0 = \" + resp.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log (\"resp_salary_element_1 = \" + resp.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log (\"resp_salary_element_2 = \" + resp.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"salary_element_0 = req_salary\", function () {\r",
							"    pm.expect(+resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"salary_element_1 = req_salary\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"salary_element_2 = req_salary\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Evgen\");\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 24);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"\r",
							"// Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < resp.salary.length; i++){\r",
							"    console.log (\"salary = \", resp.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Evgen&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req.salary // * сделал с объявление переменной\r",
							"pm.test(\"start_qa_salary = salary из request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request(salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 из request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"}); //не объявлял переменную, умножение переводит текстовое значение в цифру\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 из request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 из request\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_year = salary*3.8 из request\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name = salary из request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age = age из request \", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"}); // не объявлял переменную, добавил + к req.age - формат поменялся на number\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i in resp.person){\r",
							"    console.log(\"Property:\", i, \"property value:\", resp.person[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Evgen",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}